package school.attractor.payment_module.domain.order;import lombok.AllArgsConstructor;import org.springframework.data.crossstore.ChangeSetPersister;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import org.springframework.web.client.HttpClientErrorException;import school.attractor.payment_module.domain.exception.OrderNotFound;import school.attractor.payment_module.domain.transaction.Transaction;import school.attractor.payment_module.domain.transaction.TransactionDTO;import school.attractor.payment_module.domain.transaction.TransactionStatus;import java.util.Date;import java.util.List;import java.util.Optional;@Service@AllArgsConstructorpublic class OrderService {    public OrderRepository orderRepository;    public Page<Order> getOrders(Pageable pageable) {        return orderRepository.findAll(pageable);    }    public OrderDTO findByOrderId(int id) {        Optional<Order> order = orderRepository.findById(id);        return OrderDTO.from(order.orElseThrow( OrderNotFound::new));    }    public Order save (OrderDTO orderDTO) {        Order order = Order.from(orderDTO);        order.setDate ( new Date (  ) );        return orderRepository.save(order);    }    public void setOrderStatus(Order order, Transaction transaction) {        switch (transaction.getType ()){            case HOLD:                if(transaction.getStatus ().equals ( TransactionStatus.APPROVED )) {                    order.setStatus ( TransactionStatus.RESERVED );                    orderRepository.save ( order );                } else {                    order.setStatus ( TransactionStatus.REFUSED );                }                break;            case PAYMENT:                if(transaction.getStatus ().equals ( TransactionStatus.APPROVED )) {                    order.setStatus ( TransactionStatus.APPROVED );                    orderRepository.save ( order );                }else{                    order.setStatus ( TransactionStatus.REFUSED );                }                break;            case AUTH:                if(transaction.getStatus ().equals ( TransactionStatus.APPROVED )) {                    order.setStatus ( TransactionStatus.APPROVED );                    orderRepository.save ( order );                }                break;            default:                if(transaction.getStatus ().equals ( TransactionStatus.APPROVED )) {                    if(transaction.getAmount () == order.getAmount ()){                        order.setStatus ( TransactionStatus.TOTAL_REFUND);                        orderRepository.save ( order );                    }else {                        order.setStatus ( TransactionStatus.PARTIAL_REFUND );                        order.setResidual ( order.getResidual () - transaction.getAmount () );                        orderRepository.save ( order );                    }                }else{                    order.setStatus ( TransactionStatus.REFUSED );                }                break;        }    }    public void change(Order order) {        orderRepository.save(order);    }    public List<Transaction> getById(int orderId) {        return orderRepository.findById ( orderId ).get ( ).getTransactions ();    }    public Order findById(int orderId){        return orderRepository.findById ( orderId ).get ();    }}