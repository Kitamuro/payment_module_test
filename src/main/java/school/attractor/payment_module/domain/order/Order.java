package school.attractor.payment_module.domain.order;import com.fasterxml.jackson.annotation.JsonBackReference;import lombok.AllArgsConstructor;import lombok.Builder;import lombok.Data;import lombok.NoArgsConstructor;import school.attractor.payment_module.domain.transaction.Transaction;import school.attractor.payment_module.domain.transaction.TransactionStatus;import javax.persistence.*;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.stream.Collectors;@Entity@Data@AllArgsConstructor@NoArgsConstructor@Builder@Table(name = "orders")public class Order {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Integer id;    @Column    private String shopName;    @Column    private String shopId;    @Column    private String userName;    @Column    private String email;    @Column    private Date date;    @Column(length = 50)    private String cardHolderName;    @Column(length = 30)    private String card;    @Column(length = 10)    private String exp;    @Column(length = 10)    private String exp_year;    @Column(length = 10)    private String cvc2;    @Column    private Integer amount;    @Column    private int residual;    @Column    private TransactionStatus status;    @Column    private String orderId;    @OneToMany(fetch = FetchType.LAZY, mappedBy = "order")    @JsonBackReference    private List<Transaction> transactions = new ArrayList<>();    @Column    String RetrievalReferenceNumber;    @Column    String internalReferenceNumber;    public static Order from(OrderDTO orderDTO) {        return  Order.builder()                .orderId(orderDTO.getOrderId ())                .shopName(orderDTO.getShopName())                .userName(orderDTO.getUserName())                .cardHolderName(orderDTO.getCardHolderName())                .card(orderDTO.getCard())                .exp(orderDTO.getExp())                .exp_year(orderDTO.getExp_year())                .cvc2(orderDTO.getCvc2())                .residual(orderDTO.getResidual())                .amount(orderDTO.getAmount())                .email(orderDTO.getEmail())                .status(orderDTO.getStatus())                .date(orderDTO.getDate())                .transactions(orderDTO.getTransactions().stream().map(Transaction::from).collect(Collectors.toList()))                .build();    }}